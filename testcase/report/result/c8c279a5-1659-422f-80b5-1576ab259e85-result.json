{"name": "login_005密码错误", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcase.test_excel_case.TestExcel object at 0x000001D09FEB83C8>\ncase = {'cookies': '', 'headers': '', 'status_code': '', '前置条件': '', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n    \n        url = ConfigYaml().get_conf_url() + case[data_key.url]\n        # print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        actual_result = case[data_key.actual_result]\n        is_run = case[data_key.is_run]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n        # 判断headers是否存在\n        if headers:\n            header = json.loads(headers)\n        else:\n            header = headers\n    \n        if cookies:\n            cookie = json.loads(cookies)\n        else:\n            cookie = cookies\n    \n        # 验证前置条件\n        if pre_exec:\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为：%s \" % pre_case)\n    \n        # 接口请求\n        request = Request()\n        if len(str(params).strip()) is not 0:\n            params = json.loads(params)\n        if str(method).lower() == \"get\":\n            res = request.get(url, data=params, headers=header, cookies=cookie)\n            log.info(\"GET 请求: 用例编号：%s， 用例名称：%s\" % (case_id, case_name))\n        elif str(method).lower() == \"post\":\n            res = request.post(url, data=params, headers=header, cookies=cookie)\n            log.info(\"POST 请求: 用例编号：%s， 用例名称：%s\" % (case_id, case_name))\n        else:\n            log.error(\"错误请求methods: %s\" % method)\n        # print(\"case_id:%s============resres=====================%s\"%(case_id, res))\n        # print(\"case_id:%s============resres=====================%s\"% (case_id, str(res[\"body\"][\"msg\"])))\n        # print(\"----expect_result------%s\"% str(expect_result))\n    \n        # allure\n        # sheet名称\n        allure.dynamic.feature(sheet_name)\n        # 模块\n        allure.dynamic.story(case_model)\n        # 用例ID+ 接口名称\n        allure.dynamic.title(case_id + case_name)\n    \n        desc = \"<font color='red'> </font> {} <Br/>\" \\\n               \"<font color='red'> </font> {} <Br/>\" \\\n               \"<font color='red'> </font> {} <Br/>\" \\\n               \"<font color='red'> </font> {} <Br/>\".format(url, method, expect_result, res)\n        allure.dynamic.description(desc)\n    \n        # 断言验证\n        assert_util = AssertUtil()\n        # assert_util.assert_code(int(res[\"code\"]), int(code))\n        # assert_util.assert_body()\n>       assert_util.assert_in_body(str(res[\"body\"][\"msg\"]), str(expect_result))\n\ntest_excel_case.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.AssertUtil.AssertUtil object at 0x000001D0A0114D30>\nbody = '参数校验异常：length must be between 32 and 2147483647'\nexpected_body = '{\\n    \"tag\": \"松勤教育\",\\n    \"code\": 300215,\\n    \"msg\": \"密码错误！\",\\n    \"data\": null,\\n    \"user\": null\\n}'\n\n    def assert_in_body(self, body, expected_body):\n        try:\n            # body = json.dumps(body)\n            body = body\n>           assert body in expected_body\nE           AssertionError\n\n..\\utils\\AssertUtil.py:28: AssertionError"}, "description": "<font color='red'> </font> http://121.41.14.39:2001/token/token <Br/><font color='red'> </font> POST <Br/><font color='red'> </font> {\n    \"tag\": \"松勤教育\",\n    \"code\": 300215,\n    \"msg\": \"密码错误！\",\n    \"data\": null,\n    \"user\": null\n} <Br/><font color='red'> </font> {'code': 200, 'body': {'tag': '松勤教育', 'code': 300101, 'msg': '参数校验异常：length must be between 32 and 2147483647', 'data': None, 'user': None}} <Br/>", "attachments": [{"name": "log", "source": "50e867d3-979f-4cd6-b609-2b5c4d404c9b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "{'用例ID': 'login_005', '模块': '登录', '接口名称': '密码错误', '请求URL': '/token/token', '前置条件': '', '请求类型': 'POST', '请求参数类型': '', '请求参数': '{\"mobile\": \"13588000000\", \"password\": \"drfec5add5d087de1e8534189c687f7\"}', '预期结果': '{\\n    \"tag\": \"松勤教育\",\\n    \"code\": 300215,\\n    \"msg\": \"密码错误！\",\\n    \"data\": null,\\n    \"user\": null\\n}', '实际结果': '', '备注': '', '是否运行': 'y', 'headers': '', 'cookies': '', 'status_code': '', '数据库验证': ''}"}], "start": 1663211176364, "stop": 1663211176448, "uuid": "dcc81612-88b1-4932-a5a3-1dfbf10d5320", "historyId": "aaf59e94b9835e833b22a0c1b5fb708f", "fullName": "testcase.test_excel_case.TestExcel#test_run[case4]", "labels": [{"name": "feature"}, {"name": "story", "value": "登录"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "D-PXZ0171-01"}, {"name": "thread", "value": "3028-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_excel_case"}]}